##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.6.0-B36] date: [Tue Oct 14 10:39:08 MSK 2025] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = f4_open62541

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

ROOT_DIR     		= 	.
CORE_PATH 			= 	$(ROOT_DIR)/Core
CORE_PATH_SRC 		= 	$(CORE_PATH)/Src
CORE_PATH_INC 		= 	$(CORE_PATH)/Inc
APP_PATH 			= 	$(ROOT_DIR)/app
######################################
# source
######################################
# C sources
C_SOURCES =  \
$(APP_PATH)/main.c \
$(APP_PATH)/net.c \
$(CORE_PATH_SRC)/gpio.c \
$(CORE_PATH_SRC)/stm32f4xx_hal_msp.c \
$(CORE_PATH_SRC)/stm32f4xx_hal_timebase_tim.c \
$(CORE_PATH_SRC)/stm32f4xx_it.c \
$(CORE_PATH_SRC)/syscalls.c \
$(CORE_PATH_SRC)/sysmem.c \
$(CORE_PATH_SRC)/system_stm32f4xx.c \
$(CORE_PATH_SRC)/usart.c \
$(APP_PATH)/opcua.c 

# C includes
C_INCLUDES 		=  	$(ROOT_DIR)
C_INCLUDES 		+= 	$(CORE_PATH_INC)
C_INCLUDES 		+= 	$(APP_PATH)
C_INCLUDES 		+= 	$(APP_PATH)

# ASM sources
ASM_SOURCES =  \
startup_stm32f407xx.s

# ASM sources
ASMM_SOURCES = 

# include sub makefiles
include	filelists_lwip.mk
include filelists_stdlib.mk
include	fillelists_freertos.mk
include	fillelists_open62541.mk

INC_DIR  = $(patsubst %, -I%, $(C_INCLUDES))

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-D USE_FULL_LL_DRIVER \
-D USE_HAL_DRIVER \
-D STM32F407xx \
-D UA_ARCHITECTURE_FREERTOSLWIP \
-D OPEN62541_FEERTOS_USE_OWN_MEM 

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
CFLAGS += -D DEBUG_MODE
endif

# AS includes
AS_INCLUDES =  

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -nostdlib

#CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += $(MCU) $(C_DEFS) $(OPT) -Wall -fdata-sections -ffunction-sections -nostdlib 

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F407XX_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.o)))
vpath %.S $(sort $(dir $(ASMM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
#	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	$(CC) -c $(CFLAGS) -I . $(INC_DIR) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@
$(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

#######################################
# write
#######################################
STM32 = 1
ifeq ($(STM32), 1)
	MK = stm32f4x
else
	MK = gd32f30x
endif

STLINK = 1
ifeq ($(STLINK), 1)
	OCD_INTER = stlink
else
	OCD_INTER = cmsis-dap
endif

write: $(BUILD_DIR)/$(TARGET).elf
	openocd -f  interface/$(OCD_INTER).cfg -f target/$(MK).cfg -c "program build/$(TARGET).elf verify exit reset"

# *** EOF ***
